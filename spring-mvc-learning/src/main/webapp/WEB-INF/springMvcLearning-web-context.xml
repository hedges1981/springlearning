<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
">

   <!--<context:component-scan base-package="com.hedges" />-->
   <!--NOTE you could have: <mvc:annotation-driven/>  to make it just do the mvc stuff with annotations or 
    <context:component-scan base-package="com.hedges" /> to do a full scan for all spring stuff.


   ********************************NOTE::: it would appear that with <mvc:annotation-driven/> it
    ignores any handler mapping stuff defined in here and expects each controller to have a unique @RequestMapping
    path defined, use with caution!-->

	
        <context:component-scan base-package="com.hedges" />
    <bean name="/xmlMappedController" class="com.hedges.springlearning.mvc.controllermappingexamples.ControllerWithRequestMappingInXml"/>

    <bean class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="location">
            <value>/WEB-INF/spring-views.xml</value>
            <!--NOTE that if the location was not spefcified, it would default to WEB-INF/views.xml -->
        </property>
        <property name="order" value="0"/>
    </bean>


	<!--  this means that e.g. a view named "hello" will be directed to a file: /WEB-INF/jsp/hello.jsp  -->
    <!--NOTE*** apparently it is only this one that understands the prefixes redirect: and forward: whennnn a view name is specified-->
    <!-- NOTE, FRAMEWORK forces this one to be last, this is because it will always return a view, even if there is not one to return!-->
   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/jsp/" />
      <property name="suffix" value=".jsp" />
   </bean>





    <!--
    fffff
    
    DEMO of different HandlerMapping classes, they define how URLs are mapped to controllers-->
    <!--NOTE that they all have an order property, this defines which one takes precidence when matching up a URL-->

    <!--this one allows the bean name to have the url in it, is supplied by default, so not necessary to put it in xml, UNLESS
    another HandlerMapping is provided -->
   <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
       <property name="order" value="0"/>
   </bean>

    <!--this one allows the @RequestMapping annotation to get picked up and work. Again, is supplied by default, but needs definining if
    you define any other HandlerMapping class-->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="1"/>
    </bean>

   <!-- maps the url to a controller with the same name, note if controller not explicitly named in XML, default name is simple class name-->
   <bean class="org.springframework.web.servlet.mvc.support.ControllerBeanNameHandlerMapping">
       <property name="order" value="2"/>
   </bean>

   
   <bean id="simpleUrlHandlerMappingController" class="com.hedges.springlearning.mvc.controllermappingexamples.SimpleUrlHandlerMappingController"/>

    <!-- other mapping example, as was used in Sage code -->

    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="order" value="3"></property>
	   <property name="mappings">
               <props>
                   <prop key="/simpleUrlHandlerMapping">simpleUrlHandlerMappingController</prop>
               </props>
           </property>
    </bean>

    <bean id="beanDefinedInApplicationContext2" class="com.hedges.springlearning.mvc.applicationcontextbeans.BeanDefinedInApplicationContext">
        <property name="message" value="I am defined in the WEB application context, I OVERRIDE THE ONE SET IN THE APPLICATION CONTEXT"></property>
    </bean>

    <!--**********************EXCEPTION HANDLING EXAMPLES************************************-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name ="order" value="0"/>
    <property name="exceptionMappings">
        <props>
            <prop key="com.hedges.springlearning.mvc.exceptionhandlerexamples.DongException">
                dongError
            </prop>
        </props>
    </property>
</bean>

    <!--this one handles exceptions not handled by the one above -->
    <bean id="demoExceptionHandlerResolver" class="com.hedges.springlearning.mvc.exceptionhandlerexamples.DemoHandlerExceptionResolver">
        <property name="order" value="1"/>
    </bean>
    
    <!--RIGGING UP THE HttpMessageConverters for the Rest Stuff -->
    
    <!--looks like this one used for marshalling pojo into very simple xml-->
    <!-- you could supply a different marshaller, e.g. one to work with a jaxb style annotated bean, is one called Jaxb2Marshaller for example-->
    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"/>
    
    <bean id="marshallingHttpMessageConverter" 
      class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <property name="marshaller" ref="castorMarshaller" />
        <property name="unmarshaller" ref="castorMarshaller" />
    </bean>

    
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
         <property name="messageConverters">
      <util:list>
        <ref bean="marshallingHttpMessageConverter"/>
      </util:list>
         </property>
    </bean>
    
</beans>
