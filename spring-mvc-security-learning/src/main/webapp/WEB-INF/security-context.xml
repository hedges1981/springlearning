<beans:beans xmlns:sec="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.0.xsd">

<!--  http block: enables web security, has the effect of creating the chain of filters that handle spring security stuff&ndash;&gt;
    &lt;!&ndash; use expressions enables spring expression language to be used in JSPs -->
    <sec:http auto-config="true" use-expressions ="true" >
        
        <!--**************NOTE, use-expressions allows you to put evauluatable things in the access bit of an intercept url, see: 
        http://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html   for what can be done    -->
        
        <!-- **************NOTE::::: see how the roles have needed to be prefixed with "ROLE_". This is necessary, see use of defaultRolePrefix in class SecurityExpression root -->
        <!-- You can negate any expression using !: "!hasRole('ROLE_USER')" -->

        <!-- NOTE: ************ to allow for 'layered' access, the ordering of the intercept URLs is important, more specific ones should be higher up the list -->

        <!-- tells it where to go whenever a 403 is encountered -->
        <!--<sec:access-denied-handler error-page="/test/accessdenied"/>-->
        <!-- makes it so that you don't need to be authenticated see access denied page, makes sense -->
        <sec:intercept-url pattern="/accessdenied" access="permitAll" />
        
        <sec:intercept-url pattern="/test/loggedout" access="permitAll" />

        <sec:intercept-url pattern="/test/sahiexample/**" access="permitAll" />

        <sec:intercept-url pattern="/test/login" access="permitAll" />
        <!-- this is the thing it tries to go to in order to validate a login, so this needs to be allowed-->
        <sec:intercept-url pattern="/test/j_spring_security_check" access="permitAll"/>

        <sec:intercept-url pattern="/test/securitylearning/user**" access="hasRole('ROLE_user')"/>
        <!-- note the use of ** in the URLs, to stop hacker getting past by appending stuff to it. -->
        <sec:intercept-url pattern="/test/securitylearning/admin**" access="hasRole('ROLE_admin')"/>
        <!-- the and in this one doesn't seem to work, allows them in even if they only have 1 of the roles -->
        <sec:intercept-url pattern="/test/securitylearning/adminAndUser**" access="hasRole('ROLE_admin') and hasRole('ROLE_user')"/>
        <sec:intercept-url pattern="/test/securitylearning/adminOrUser**" access="hasAnyRole('ROLE_admin','ROLE_user')"/>

        <sec:intercept-url pattern="/**" access="isAuthenticated()"/>

        <!-- Tells it to use 'remember-me' authentication.
        Note  the datasource ref, allows for the remember me to be persisted,see persistent-logings table.
        requires a check box called with name 'remember-me' to be toggled on. Note that   
        remember-me-parameter allows for the name of the parameter to be changed.
        Note that when the user logs out, their row from the table gets deleted.
        Note, a user can have remember me in > 1 place, in which case they get two rows in the
        persistent-logins table. A cookie is stored called 'remember-me' on the browser, which points to the
        series column of the persistent logins table.        -->
        <sec:remember-me token-validity-seconds="3600"  data-source-ref="dataSource"/>

        <!--Custom form login settings-->
         <!--default-target-url. where they go to if i) they cannot carry on to the requested url, or ii) they have come straight in via the login page-->
        <!-- note that login-processing-url defaults to /login if not specified. Note that the login-processing-url doesn't need a permit all security
        rule, presumably it gets automatically interpreted by the login filter.
        Note how it is set as the post target in the custom login form on login.jsp -->
        <sec:form-login
                login-page="/test/login"
                login-processing-url="/processLogin"
                default-target-url="/test/ding"
                authentication-failure-url="/test/login?error"
                always-use-default-target="false"
                username-parameter="username"
                password-parameter="password" />

        <!--***********NOTE******** unlike the examples,log out was a faff to get to work, had to:
        - use a post for the logout form. See printMessageWithLogout.jsp
        -have csrf tokens on the form, seems like with spring security 4, csrf checking is default.
        - have a valid success url. 
        -AND explicitly set logout-url="/j_spring_security_logout", even though that is supposed to work by fucking default -->
        <sec:logout logout-success-url="/test/loggedout" logout-url="/j_spring_security_logout"/>
    </sec:http>
    
    <!--NOTE the need to use the beans ns prefix due to the slightly messed up namespacing of this file -->
    <!--NOTE would be better practice to put this in a separate datasource-context.xml file-->
    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <beans:property name="url" value="jdbc:mysql://localhost/test_schema" />
        <beans:property name="username" value="root" />
        <beans:property name="password" value="password" />
    </beans:bean>

    <!-- here we define the classes used for authentication. Basically we have: AuthenticationManager has a AuthenticationProvider
    has a UserDetailsService. It is the user details service which provides a look up of users based on username,-->
    <sec:authentication-manager>
        <sec:authentication-provider>
            <!--note how they are stored in the db in hashed format -->
            <!-- this uses the default BCryptPasswordEncoder class for the hashing. BCrypt is the recommended ecoder these days. -->
            <!-- see GenreateEncodedBCryptPasswords test class for generation logic. Note that this will use the default strength and 'salt',
            you could use <sec:password-encoder ref="beanId" /> to have one that uses a custome strength and salt-->
                <sec:password-encoder hash="bcrypt" />
                
            <!--user details service that works off a database, see the test_schema.sql for how this is linked. -->
            	<sec:jdbc-user-service data-source-ref="dataSource"
		  users-by-username-query=
		    "select username,password, enabled from users where username=?"
		  authorities-by-username-query=
		    "select username, role from user_roles where username =?  " />
            
            <!--this gives us a default noddy UserDetailsService. In practice you'd use something proper that e.g. went off to a database-->
           <!-- <sec:user-service>
                <sec:user name="hedges_guest" password="password" authorities="ROLE_guest" />
                <sec:user name="hedges_user" password="password" authorities="ROLE_user" />
                <sec:user name="hedges_admin" password="password" authorities="ROLE_admin" />
                <sec:user name="hedges_admin_and_user" password="password" authorities="ROLE_admin,ROLE_user" />
            </sec:user-service>-->
        </sec:authentication-provider>
    </sec:authentication-manager>
    
    <!--allows for bean methods to be annotated with eg @Secured("someRole") or @RolesAllowed("someRole")-->
    <!-- see the use of class "BeanWithMethodLevelSecrity" for an example-->
    <sec:global-method-security secured-annotations="enabled">
        <sec:protect-pointcut expression="execution(* adminOnlyViaGlobalDeclaration())" access="ROLE_admin"/>
    </sec:global-method-security>
    
</beans:beans>