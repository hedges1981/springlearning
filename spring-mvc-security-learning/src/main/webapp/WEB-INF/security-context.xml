<beans:beans xmlns:sec="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.0.xsd">

<!--  http block: enables web security, has the effect of creating the chain of filters that handle spring security stuff&ndash;&gt;
    &lt;!&ndash; use expressions enables spring expression language to be used in JSPs -->
    <sec:http auto-config="true" use-expressions ="true" >
        <!--**************NOTE, use-expressions allows you to put evauluatable things in the access bit of an intercept url, see: 
        http://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html   for what can be done    -->
        
        <!-- **************NOTE::::: see how the roles have needed to be prefixed with "ROLE_". This is necessary, see use of defaultRolePrefix in class SecurityExpression root -->
        <sec:intercept-url pattern="/test/securitylearning/user**" access="isAuthenticated() and hasRole('ROLE_user')"/>
        <!-- note the use of ** in the URLs, to stop hacker getting past by appending stuff to it. -->
        <sec:intercept-url pattern="/test/securitylearning/admin**" access="isAuthenticated() and hasRole('ROLE_admin')"/>

        <!-- Tells it to use 'remember-me' authentication. This means that it will store a cookie on the browser to keep a user logged
        in between sessions. Presumably you can configure things like cookie expiry -->
        <sec:remember-me />
    </sec:http>

    <!-- here we define the classes used for authentication. Basically we have: AuthenticationManager has a AuthenticationProvider
    has a UserDetailsService. It is the user details service which provides a look up of users based on username,-->
    <sec:authentication-manager>
        <sec:authentication-provider>
            <!--this gives us a default noddy UserDetailsService. In practice you'd use something proper that e.g. went off to a database-->
            <sec:user-service>
                <sec:user name="hedges_user" password="password" authorities="ROLE_user" />
                <sec:user name="hedges_admin" password="password" authorities="ROLE_admin" />
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>
</beans:beans>