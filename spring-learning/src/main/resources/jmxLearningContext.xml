<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- this will pick up the @ManagedResource annotations so that they get made into mbeans-->
    <context:component-scan base-package="com.hedges.jmxexample" />

    <!--NOTE, this enables you to create your own MBean server. -->

    <!-- this uses the MBeanServerFactoryBean under the hood, with locateExistingServerIfPossible set to true. -->
    <context:mbean-server id="testServer"/>
    
    <!--THIS picks up beans annotated with @ManagedResource. 
    *****NOTE******************** that you could also delcare a bean of class
    org.springframework.jmx.export.annotation.AnnotationMBeanExporter which would do the same thing -->
    <!--***************NOTE that the spring code behind this will automatically create an MBeanServer if there is not one there, then export the beans to it.
    It does this by calling standard 'javax' code to get one set up -->
    <!--NOTE how we export them to the "testServer" that has been defined above-->
      <context:mbean-export server="testServer" default-domain="com.hedges.jmxexample"/>


    <!-- Expose JMX over JMXMP -->
    <!-- this is a connector that conntects to the MBean Server and allows the various MBeanProxyFactoyBeans to connect to the MBeans -->
    <!-- rigs it up so that the mbeans are available on the below listed url-->
    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean"/>

    <!-- Client connector to JMX over JMXMP -->
    <!-- DEFINES A connector that the below proxy beans can use to connect to the JMS Server defined above -->
    <!-- NOTE: for the jmxmp protocol to work ok, had to include jmxremote_optional dependency, see da POM -->
    <!-- NOTE that the service URL here comes from the value of: ConnectorServerFactoryBean.DEFAULT_SERVICE_URL, you would use setServiceUrl(...) to set it to what you want -->
    <bean id="clientConnector" class="org.springframework.jmx.support.MBeanServerConnectionFactoryBean"
          p:serviceUrl="service:jmx:jmxmp://localhost:9875" />

    <!-- Client AnnotatedMBean proxy to JMX over JMXMP -->
    <!-- Note how the proxy has a reference to "clientConntector". It talks to the Mbean server over the serviceUrl -->

    <!--***************NOTE: for this to work, the objectName   MUST be the same as what is in the @ManagedResource annotation on the class.
    THIS ensures that the annotations on that class which expose the methods for MBean access can be called via JMX -->

    <!--**************NOTE: in this example we use simple proxy stuff to access the Mbeans, in realty for a real App, you would probably use the
    'javaConsole' which talks to the Mbean server over a port -->
    <bean id="annotatedMBeanProxy" class="org.springframework.jmx.access.MBeanProxyFactoryBean"
          p:objectName="com.hedges.jmxexample:name=annotatedMBean"
          p:proxyInterface="com.hedges.jmxexample.AnnotatedMBean"
          p:server-ref="clientConnector" />


    <!--*********************** STUFF FOR USING POJOS AS MBEANS *********************************************-->
    <bean id="pojoMBean" class="com.hedges.jmxexample.POJOMBeanImpl"/>

    <!-- THIS exports the listed POJO beans as JMX Mbeans. Note that by default, all public getters and setters are exposed as 'ManagedAttributes',
     and all other public methods as ManagedOperation, basically doing it this way saves you from having to put all the annotations all over the class-->
    <bean class ="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <util:map>
                <entry key="com.hedges.jmxexample:name=pojoMBean" value-ref="pojoMBean"/>
            </util:map>
        </property>
    </bean>

    <!-- again, put up a proxy for the POJO mbean -->
    <bean id="pojoMBeanProxy" class="org.springframework.jmx.access.MBeanProxyFactoryBean"
          p:objectName="com.hedges.jmxexample:name=pojoMBean"
          p:proxyInterface="com.hedges.jmxexample.POJOMBean"
          p:server-ref="clientConnector" />
    

</beans>