<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/jdbc
							http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Infrastructure configuration to support system testing the rewards 
		application. These beans are defined in a separate file to isolate infrastructure 
		config from application config, as infrastructure often varies between environments. 
		For example, in a test environment you might use a lightweight in-memory 
		DataSource, while in production you connect to a database server with a connection 
		pool. -->
	
	<!-- DONE 04: use the <import /> tag so the current file always
	comes with application-config.xml. Modify the RewardNetworkTests to specify
	only one file when loading the ApplicationContext.  When done, re-run 
	RewardNetworkTests, it should pass.	-->
	<import resource="classpath:rewards/internal/application-config.xml"/>

	<!-- Creates an in-memory "rewards" database populated with test data for 
		fast testing -->
		
	<!-- DONE 03: Declare a tag to externalize property values. (hint: use context namespace).
		Set its location attribute to point to /application.properties. 
		Create a new /application.properties file in the classpath root for it to reference. 
		Externalize the 'scripts' values used in the 'populator' bean below. 
		Re-run RewardNetworkTests, it should pass.		
	-->
    <!--NOTE: note the classpath reference to the file, it is in the base package, hence the syntax-->
    <context:property-placeholder location="classpath:/application.properties"/>

    <!--NOTE this way of making an Embedded database, compared to the use of the EmbeddedDatabase builder class elsewhere in this
    course-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean">
        <property name="databasePopulator" ref="populator"/>
    </bean> 
        
    <bean id="populator" class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
        <property name="scripts">
            <list>
                <value>${schema.location}</value>
                <value>${data.location}</value>
            </list>
        </property>
    </bean>
	


</beans>
