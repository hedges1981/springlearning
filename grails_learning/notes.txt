quotd - the web app created in chapter 1 of book.

NOTE: on installing Grails:
went for version 2.3.7 as that is the same as the book, note v3.x.x is out and was tried, but kept coming across too many
issues with the book, so scaked it.

INstallation:
- put grails folder in e.g. /opt folder
add this into my user profile folder to get grais on the path (in linux), would use env variables for same thing in linux:

***********NOTE ON RUNNING< JAVA VERSION ****************
grails v 2.3.7 doesn't work with java 8, so had to install a java 7 jdk.
to work with it, in the terminal window being used to run grails, run this at start up, so that it uses the 1.7 java for all
subsequent runs:
export JAVA_HOME=/opt/java/jdk1.7.0_79



chapter 1      ******************************

- created QuoteController.groovy

-**********************
 note on page 17, when you brought in the stylesheet and the images they ended up having to go nithe grails-app/assets folder
for it to work

- created the QuoteDomain class using:
-grails create-domain-class quote
-note that this created the file Quote.groovy


***********Datasource.... book talks about a file named DataSource.groovy, however it seems that is this grail version
(3.x) the datasources are in file conf/application.yml instead.

NOTE on the persistent h2 file:

- run the command ;- grails run-app from the folder:
grails_learning/qotd
NOTE: the db url of:
jdbc:h2:./devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE

the ./devDb means it is pointing to a persistent db file in the folder: grails_learning/qotd


***** SAVING STUFF TO THE DB, seep book p.20, ran the console from the qotd folder, and it worked ok.
NOTE: the grails console command i) fires up the web app along with a groovy console to do stuff with it.
 new quote created by running:  new qotd.Quote(author: 'king kong', content:'I am king kong').save().. note the
 save() method on the domain object, this is also added in by Grails.


*****SCAFFOLDING, see in QuoteController.groovy the scafolding = Qote bit, this auto sets up scaffolding for the Quote
entity, see at eg> http://localhost:8080/quote/index for how it auto rigs up view+controller to allow to do CRUD operations.


*****VALIDATION CONSTRAINTS: see book p.24 / the Quote.groovy entity, for how the validation is put on the class,
// //NOTE that it appears that if you break validation that is done server-side,
          //it gives you a shite error message rather than one actually telling you what is the issue.


********* p. 25: CREATED A SERVICE
ran: grails create-service quote
this created the service groovy file in      service/qotd.
see the QuoteController for how it is i) injected into a controller and used.

****** p. 27:  BIT ABOUT TESTING
See the QuoteServiceSpec.groovy that was auto created when we created the QuoteSerivce
NOTE******TO RUN A TEST: rather than what the book says, this command seems to be the one to use to run the QuoteServiceSpec test:
grails test-app -unit QuoteServiceSpec
--run with --stacktrace to get the stacktrace if it fails.


*****  p.29 / 30 NOTE: Couldn't implement the ajax bit, as in grails 3.x, the remoteLink tag has been deprecated
NO easy alternative for doing this seems to have been offered.
Further more Jquery bit also not working. Instructions on internet say to call:
- grails install-plugin jquery
- grails installJquery
to get it working, but the install-plugin thing has again been removed in grails 3.



****** P.31, 32:
managed to build  a war file of the thing: grails war
stats: call grails stats, note that the LOC column means 'lines of code'.


******************CHAPTER 2 GROOVY LEARNING  **************************
set up of intellij for groovy;;;; had to dl groovy sdk from net, then put in groovy-sdk folder
when creating groovy module, set it to point to the right folder for the groovy SDK.

***** SPOC TESTING*****
had to install the SPOCK intellj plugin so that it can run the spock tests
****NOTE: to get the dependencies for spock tests, added: org.spockframework:spock-core:1.0-groovy-2.4
to the list of dependencies in the intellij->file->projectStructure. Click on the +, then search for the dep u need.
then get it from maven.

*********DIDNT bother working examples of the @TypeChecked annotation, apparently this makes it compile with strict type checking,
like java

****BOOK recommendations for typing p.58. Says use typing for method signatures and object properties, not for local variables.


*************CHAPTER 3 MODELING THE DOMAIN *************************
- switched to grails 2.3.7 at this point to get consistency with the book:
- created the hubbub grails app, work is in the hubub folder.

created domain class via:
grails create-domain-class com.hedges.User

created an integration test for that via:
grails create-integration-test com.hedges.UserIntegration

ran the integration test that was created via:
grails test-app -integration:
(note test-app alone runs both unit and integration, test-app -unit runs just the unit test, see above for notes on making
it run just a specific test).

***NOTE: to get it to put out e.g. println to the console,. you need -echoOut, like:
grails test-app -integration -echoOut

NOTE that the usless @@@@ that wrote the book didn't write the command right, you need the - before unit/ integration - wasted time faffing about with that.

******SOME NOTES ON PERSISTANCE****
see the test: UserIntegrationSpec for some notes on persisting entities.
p.74: added some validation constraints to the User object, then added a test that tests them.
p.74,75,76-> added some unit test to test validation, note the use of the valid() call and also subsequent inspection of the
valiation errors in the UserIntegrationSpec test.

****ORM****
p.81, modeled a 1-1 rel, note that you can have > 1 1-1 rel by just having more in the hasOne map....
p.82 modeled a 1-many.
tests of the ORM stuff are in PostIntegrationSpec, NOTE: on here how the persisting of e.g. the Post objects is done automatically,
***NOTE, some decent ORM and persistence tricks in all these integration tests.
SORT ORDER FOR relationships: see p.85 and also the mapping bit of the User class.

***ORM Many -> many rels*****
added the many to many rels between tag and post, see pages 87-88, and also the test:  "Exercise tagging several posts with various tags"
which tests it all.

*** SELF REFERENCING REL ***
Nothing special, just a 1-1 or one -> many rel that happens to point at the same type.
See the folling field of user and the test:

"Ensure a user can follow other users"


*****************CHAPTER 4, BUILDING A UI ******************
- ran the commands on p.92 to create a scafoldingcontroller for the domain objects

p.94 ran into pain about the validation, changed a constraints block on the fly, and that ended all server side validation,
-had to restart to make it work again.
- changed the validation message for user.password , see file messages.properties
note, seems like changes to messages.properties do not get auto loaded.

Customised some CSS as per p.98, see changes made to main.css
changes the main.gsp file as per book, and also added in the hubbub.css file to web-app/css


