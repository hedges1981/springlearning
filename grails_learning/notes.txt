*****NOTE: book contains many tedious errors, see:
https://manning-content.s3.amazonaws.com/download/d/a8a43d8-d482-4a99-92c9-49aa4027c284/Smith_GrailsinAction_Err2.html


quotd - the web app created in chapter 1 of book.

NOTE: on installing Grails:
went for version 2.3.7 as that is the same as the book, note v3.x.x is out and was tried, but kept coming across too many
issues with the book, so scaked it.

INstallation:
- put grails folder in e.g. /opt folder
add this into my user profile folder to get grais on the path (in linux), would use env variables for same thing in linux:

***********NOTE ON RUNNING< JAVA VERSION ****************
grails v 2.3.7 doesn't work with java 8, so had to install a java 7 jdk.
to work with it, in the terminal window being used to run grails, run this at start up, so that it uses the 1.7 java for all
subsequent runs:
export JAVA_HOME=/opt/java/jdk1.7.0_79



chapter 1      ******************************

- created QuoteController.groovy

-**********************
 note on page 17, when you brought in the stylesheet and the images they ended up having to go nithe grails-app/assets folder
for it to work

- created the QuoteDomain class using:
-grails create-domain-class quote
-note that this created the file Quote.groovy


***********Datasource.... book talks about a file named DataSource.groovy, however it seems that is this grail version
(3.x) the datasources are in file conf/application.yml instead.

NOTE on the persistent h2 file:

- run the command ;- grails run-app from the folder:
grails_learning/qotd
NOTE: the db url of:
jdbc:h2:./devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE

the ./devDb means it is pointing to a persistent db file in the folder: grails_learning/qotd


***** SAVING STUFF TO THE DB, seep book p.20, ran the console from the qotd folder, and it worked ok.
NOTE: the grails console command i) fires up the web app along with a groovy console to do stuff with it.
 new quote created by running:  new qotd.Quote(author: 'king kong', content:'I am king kong').save().. note the
 save() method on the domain object, this is also added in by Grails.


*****SCAFFOLDING, see in QuoteController.groovy the scafolding = Qote bit, this auto sets up scaffolding for the Quote
entity, see at eg> http://localhost:8080/quote/index for how it auto rigs up view+controller to allow to do CRUD operations.


*****VALIDATION CONSTRAINTS: see book p.24 / the Quote.groovy entity, for how the validation is put on the class,
// //NOTE that it appears that if you break validation that is done server-side,
          //it gives you a shite error message rather than one actually telling you what is the issue.


********* p. 25: CREATED A SERVICE
ran: grails create-service quote
this created the service groovy file in      service/qotd.
see the QuoteController for how it is i) injected into a controller and used.

****** p. 27:  BIT ABOUT TESTING
See the QuoteServiceSpec.groovy that was auto created when we created the QuoteSerivce
NOTE******TO RUN A TEST: rather than what the book says, this command seems to be the one to use to run the QuoteServiceSpec test:
grails test-app -unit QuoteServiceSpec
--run with --stacktrace to get the stacktrace if it fails.

NOTE: ***pain,to run e.g. all the unit tests:
grails test-app unit no work, need to say unit: i.e. have : at the end.


*****  p.29 / 30 NOTE: Couldn't implement the ajax bit, as in grails 3.x, the remoteLink tag has been deprecated
NO easy alternative for doing this seems to have been offered.
Further more Jquery bit also not working. Instructions on internet say to call:
- grails install-plugin jquery
- grails installJquery
to get it working, but the install-plugin thing has again been removed in grails 3.



****** P.31, 32:
managed to build  a war file of the thing: grails war
stats: call grails stats, note that the LOC column means 'lines of code'.


******************CHAPTER 2 GROOVY LEARNING  **************************
set up of intellij for groovy;;;; had to dl groovy sdk from net, then put in groovy-sdk folder
when creating groovy module, set it to point to the right folder for the groovy SDK.

***** SPOC TESTING*****
had to install the SPOCK intellj plugin so that it can run the spock tests
****NOTE: to get the dependencies for spock tests, added: org.spockframework:spock-core:1.0-groovy-2.4
to the list of dependencies in the intellij->file->projectStructure. Click on the +, then search for the dep u need.
then get it from maven.

*********DIDNT bother working examples of the @TypeChecked annotation, apparently this makes it compile with strict type checking,
like java

****BOOK recommendations for typing p.58. Says use typing for method signatures and object properties, not for local variables.


*************CHAPTER 3 MODELING THE DOMAIN *************************
- switched to grails 2.3.7 at this point to get consistency with the book:
- created the hubbub grails app, work is in the hubub folder.

created domain class via:
grails create-domain-class com.hedges.User

created an integration test for that via:
grails create-integration-test com.hedges.UserIntegration

ran the integration test that was created via:
grails test-app -integration:
(note test-app alone runs both unit and integration, test-app -unit runs just the unit test, see above for notes on making
it run just a specific test).

***NOTE: to get it to put out e.g. println to the console,. you need -echoOut, like:
grails test-app -integration -echoOut

NOTE that the usless @@@@ that wrote the book didn't write the command right, you need the - before unit/ integration - wasted time faffing about with that.

******SOME NOTES ON PERSISTANCE****
see the test: UserIntegrationSpec for some notes on persisting entities.
p.74: added some validation constraints to the User object, then added a test that tests them.
p.74,75,76-> added some unit test to test validation, note the use of the valid() call and also subsequent inspection of the
valiation errors in the UserIntegrationSpec test.

****ORM****
p.81, modeled a 1-1 rel, note that you can have > 1 1-1 rel by just having more in the hasOne map....
p.82 modeled a 1-many.
tests of the ORM stuff are in PostIntegrationSpec, NOTE: on here how the persisting of e.g. the Post objects is done automatically,
***NOTE, some decent ORM and persistence tricks in all these integration tests.
SORT ORDER FOR relationships: see p.85 and also the mapping bit of the User class.

***ORM Many -> many rels*****
added the many to many rels between tag and post, see pages 87-88, and also the test:  "Exercise tagging several posts with various tags"
which tests it all.

*** SELF REFERENCING REL ***
Nothing special, just a 1-1 or one -> many rel that happens to point at the same type.
See the folling field of user and the test:

"Ensure a user can follow other users"


*****************CHAPTER 4, BUILDING A UI ******************
- ran the commands on p.92 to create a scafoldingcontroller for the domain objects

p.94 ran into pain about the validation, changed a constraints block on the fly, and that ended all server side validation,
-had to restart to make it work again.
- changed the validation message for user.password , see file messages.properties
note, seems like changes to messages.properties do not get auto loaded.

Customised some CSS as per p.98, see changes made to main.css
changes the main.gsp file as per book, and also added in the hubbub.css file to web-app/css

BOok p.102, used getDisplayName to make the profile look a bit better in the UI.
p.104,list.gsp gone from later versions of grais, do it for index.gsp instead.

8**made changes to index.gsp, show.gsp and renderEditor.gsp to make it use the getDisplayString.
seems to be the case that:
list.gsp - one used when listing the objects
show.gsp... one used when looking at an object
rendorEdiotr.template ... this is responsible for creating the UI widgets, changed so that the display name is used in change forms.

*****DYNAMIC SCAFOLDING VS STATIC SCAFOLDING ****
in the default way done, it is dynamic scaffolding, so that grails generated scaffolding views etc will keep up with changes to a domain object.
you can also have static scaffolding, where you have separate views and controller for a given object.
Call e.g:

grails generate-all (or generate-views or generate-controller) com.hedges.User

note how a set of user specifi views were created, to allow for separation of the stuff for the User object.
Note however that these new static views need updating manually to relect changes to the object model.
Note how the new static userController has various methods that basically correspond to crud operations.
TO switch back to dynamic scafolding for the class, just delete all the geparate views.


***********CHAPTER 5***************
*********SQL, DATABASES, ETC **************88



***********NOTE:******************
file grails-app/conf/bootstrap.groovy place to run stuff on application start, see e.g. the stuff in it for setting up data in the db.


ENVIRONMENTS:::  p.113
pick it on start up through :
e.g.
grails -Dgrails.env=staging wa
note, ****** if you spell the env name wrong, grails gives no warning, instead loads the default configuration
SEE the dataSource.groovy file for example use of environments .

DEFAULT FOR MOST COMMANDS IF NO ENV SET IS DEVELOPMENT


P. 114. shows how u can write actual code checking the environment in bootstrap.groovy.

115. ADDED in a search form, with an action method on the controller , as results, where some SQL is done.

117. INTEERESTING note about the DEV method, use scaffolidng to start, then gradually replace it with the real stuff.

118, added results JSP.

120: QueryIntegrationSpec class created with good examples on SQL qurtying in it.


****GRAILS GROOVY CONSOLE****
ran with:      grails â€“reloading console
import com.hedges.*
User u = new User()
println User.list()

appears like it runs the app and you can interact with it,e.. the above brought stuff back that was in the db.

**About environemnts again, e.g. this will print the current environment and execute some code specified for the current env
println Environment.current
Environment.executeForCurrentEnvironment(new BootStrap().init)

***NOTE: on logging SQL:
see bits added to the log4j section of config.groovy, also bits added to datasource.groovy to format the SQL
***NOTE: hibernate block in datasource.groovy is where all the hibernate properties are set.

****SOME ADVANCED SQL*****
-p.128, use of countBy, etc
p.130: use of criteria to do e.g. an advanced search form.

**NOTE !!!!!!!!!!!!!!!!!!!!!
see the advSearch.gsp and the advResults method in userController, very nice reusable pattern for doing an advanced searc
see the page at:
http://localhost:8080/hubbub/user/advSearch


****P.132, talks about how to do projections, (count, with group by, etc)
NO examples done.

**************HQL>>>>>>>>>>>>>>>> Hibernate query language********************
can be used for queries as a replacement for using the criteria API, see p.133 for some examples.



*******************CHAPTER 6****************************************
*******************CONTROLLING APPLICATION FLOW*******************


****NOTE: unit testing and mocking, see. PostControllerSpec , some very good easy patterns here for mocking the persistence and
just generally testing a controller.
Run unit tests via:
grails test-app -unit

-implemented the posts/timeline view, see timeline.gsp and logic in post controller. Some decent 'gsp' stuff in the gsp, ${...}
looping, etc.
*****TIMELINE FUNCTIONALITY **** demos the use of params.id well, e.g. grais default in the below is to pass 'chuck_norris' as the params.id value
when showing the timeline view.
goto: http://localhost:8080/hubbub/post/timeline/chuck_norris
too see timeline in action.


************ADDING IN NEW DATA VIA UI*********************
implemented logic to add new post to users tmeline, lots of good stuff, see timeline.gsp, timelinecontroller and the test
brings in scopes, e.g. flash scope,
see: p.148 for details about the scopes available.

NOTE: flash scope and servletContext scope

NOTE: default action for a controller,  implemented this with the index method of postController., default if no controller action specified
generally use this to do some kind of default redirect.

******RE-DIRECTS*******************************************
see page 153, you can do additional stuff with re-directs other than the simple ones implemented in the post controller.



***************CHAPTER 7*****************
***********SERVICES AND DATA BINDING************

create a service via e.g:
grails create-service com.hedges.Post
-services created in grails-app/services, also of course creates unit test for it.
NOTE:  we have @Transactional, good on the service. See book p.157 for grails 2.2 way of doing transactional service, basically was default.
Added unit test : PostServiceSpec , note how there is a bit in there for checking for expected exceptions (thrown(...)

****MOCKING OF A SERVICE****
test added to PostCOntroller spec that mocks the PostService, useful example.


***LOGGING*****
see p.161, basically you can call e.g. log.info "qwqwqw" when ever you want, log is always available.

***DATA BINDING*****
162; can use @RequestParameter to customise the binding for action parameters

****SEE register.gsp and also register() in userController.
this demos some parameter binding, for the nested profile object as well
SEE the note about belongsTo on the profile class and p.166 bottom. basically ensures that validation cascades.

**** NOTE: the test "Registering a user with known good parameters"()
shows further shortcuts for doing a controller test, see e.g. the params usage

***SHOWING ERRORS
see the hasErrors section of register.gsp

***NOTE: for displaying errors against fields, p.169 has a way of doing it, but it suggests using the FIELDS plugin to
do it more elegantly.

*** registration available at:

**** PREVENTING UN_AUTHORISED CHANGES TO DOMAIN OBJECTES*****************
note: see p.164 where it talks about black listing stuff using bindData(..).


********* COMMAND OBJECTS **************
basically a 'transfer object' to use when a form doesn't relate to a domain object directly.
se the UserRegistrationCommand added to UserController       , and also the test which proves it's validation

-see register2 action un UserCOntroller for the use of the Command object:

added "Invoking the new register action via a command object" to userControllerSpec, good pattern for testing a controller with a command object.

***ENCRYPTING PASSWORD: see the userRegistrationCommand class, where a cryptoService is injected to allow generation of an encrypted password.


**************UPLOADING FILES *****************
see ImageController and associated views and objects.
NOTE: see also method rawUpload in the ImageController, example of accepting a file and storing it in th filesystem instead of the DB.
In all this it uploads an image,
note p.176 where it alludes to the 'burning-image' plugin to help with deeper image stuff.

link for uploading image:
http://localhost:8080/hubbub/image/form

see profile.gsp for nifty bit of ajax like fetching of an image.

******************FILTERS *****************************
create filter using e.g.
grails create-filters com.hedges.LameSecurity

****NOTE: filter class must be SomeNameFilters , note .... SomeNameFilter (no s on the end) else apparently it wont fire.
---because a filters file can contain > 1 filter .
filter file created in grails-app/conf folder.

***NOTE: see LameSecurityFilters for notes etc about filters:
wild card for filters, e.g. for the controller and action:
(controller: '*', action: '*'),
*** FILters can get at controller variables like e.g: (request, response, params, session, flash, + some more apparently.
see p.180 for the other ones:
p.181 like with all the other code, you can inject services, see p.181 for an example
****TESTING FILTERS****
added filter test: "Exercising security filter for unauthenticated user", see this for some notes on testing filters, e.g.
the withFilters(...) bit.

*** FILTERS WITH URLS ********
filters can also be applied on a URL basis, see p.182 for examples.


****CUSTOM URL MAPPINGS *****
note that up to now we rely on the default URL system, /controllerName/action-name/id
p.182 -> 187 talk about customising the URL mappings
***see p.185 for bit about mapping views to error codes.
read this bit when time, looks like you can do a lot of what you can with Spring, e.g. have parameters in the url, * wildcards, etc
/grails-app/conf/UrlMappings.groovy is the file where url mappings are done .
Copied in the UrlMappings.groovy from the book, to keep up with the book, and changed PostControllerSpec to match the changed mappings.


*************CHAPTER 8: FANCY UI STUFF *************
GSP TAGS:
- p.190 if test tag:
- p.191: each tag for looping.
- p.191: ways of doing links, check out the createLink one, looks quite nifty.
p.191-2 see the resource for linking to files, and the external to simplify linking to a resource from inside a link tag.

FORM TAGS: p.193

*****FORMS: see register.gsp, accessible at:
http://localhost:8080/hubbub/user/register

DEMOS lots of possible form features as well as the use of a command object to talk to the register2 method on userController.
**HTML passed through****
see p. 195, grails will pass html attributes through to the underlying html that gets rendered. Probably useful for doing a class
SELECT controls:::: these are quite nifty, see the referrer one and the way it just plugs into a controller method.

****DEBUGGING APP *****
grails -debug run-app   port is 5005

****PAGINATION: implemented the global gsp and controller action that shows all the posts on one page.
NOTE the pagination tag in global.gsp, which allows for pagination.

see new global page at:
http://localhost:8080/hubbub/post/global

*** USE OF TAG LIBS ***
see e.g. DateTagLib.groovy .... defines some custom tags with the namespace hub. See how the nice  hub:dateFromNow is used in the
global.gsp ( through the use of the _postEntry.gsp ).

TESTING TAG LIBS
see DateTagLibSpec for example / re-usable template of testing a tag lib.

CONDITIONAL SHOWING OF A THING WITH A TAG LIB (see p.203 ...logical tags)
see in UtilTagLib.groovy the certainBrowser and showRandom tags. The certainBrowser one reads in the tag arguments and decides whether or
not to show something, the other one just does a 1/in 2 show.

ITERATION USING A TAG LIB
can use the <g:each tag to do iteration, or see the 'eachFollower' tag on p.205 and in UtilTagLib.groovy for a diff way to do it.

CALLING ONE TAG FROM ANOTHER:
see how the tag: UtilTagLib.tinyThumbnail calls the createLink tag to do its work,

8.3 ADDING DELICIOUS LAYOUTS... SITE MESH!
p.207- main.gsp is the principle template used to render a page, see how it adds the Hubbub - Social Networking on Grails footer
see the g:layoutHead and g:layoutBody tags for where it merges in the head and the body elements for the actual gsp being rendered.
p.208... g:meta tag to display e.g. the version ,see it in main.gsp template.

p.208, see the ways of applying a layout to controller, actions, switching it in the page, etc.
Created a /layouts/post.gsp which got applied to the /post/global page, see: http://localhost:8080/hubbub/post/global
NOTE!!! beware of an unseen meta tag scuppering the picking of the layout.

p.210-211 talks about using bootstrap to design layouts, then merging in the gsp via tags like: <g:layoutBody/>

TEMPLATES****, p.212 goes into depth on these, see how the postEntry template works on the global.gsp page.

SKINNING**** p.213, looks easy, not bothered implementing.

***IMPLEMENTING NAVIGATION TABS ****
- installed the navigation plugin, see BuildConfig.groovy , where it has section plugins :
**REMEMBER HERE THAT /timeline is directed to the post controller, see UrlMappings.groovy where all of that was set up.


***** AJAX, p.216 ****
note ajax bit is working to ajax up the posting of a post, see http://localhost:8080/hubbub/timeline/chuck_norris for where
that is done from.

----import jquery by doing:
<g:javascript library="jquery"/>
see timeline.gsp for all the ajax stuff, note the 'submit to remote form and also the way it calls into the js functions.
NOTE that the LameSecurityFilters was set so that it always defaults user to chuck_norris, as adding that login stuff was proving painful.

p.222, animations and effects..... skipped that bit.

HANDLING JSON RETURN VALUES FROM AJAX******
see: <div id="demoOfProcessingJson" > in timeline.gsp and the getSomeJson of PostController.
Note the I butchered the book example, see the way that it gets the data back and shows it in an alert, instead of doing the tiny URL stuff.


**** CHAPTER 9, building reliable applications BASICALLY TESTING ********
(testing)
see test phases, run as in order : unit, integration, functional, other
Useful testing shortcuts:

grails test-app unit:spock  --runs only the spoc unit tests:
Basically you can mix and match phase and test types to get done what you need, see p.231 for info.

p.232, e.g. to run a specific test:
grails test-app PostController
can also use wild cards, e.g.

grails test-app com.hedges.*
can also test specific tests, e.g.:
grails test-app unit: PostService.\"Invalid posts generate exceptional outcomes\"

*****NOTE NOTE::!!!! use the grails console to run tests, as they run a lot faster lot faster.

**MIXINS*** see file mixinDemo.groovy in groovy proj, basically looks like a way of fudging in stuff from another objecty
MIXINS from the underlying basis of the e.g. @TestFor..... stuff from the tested class is mixed in, e.g. stuff from the
controllers like model, params, session, etc.

****EXPLICIT MOCKINGS****
see p.240 for the explicit mocking in the PostControllerSpec, see how it uses the stuff in the @Mixin at the top to
get hold of methods that are used to create mocks.

NOTE: limitations of mocking Domain objs, it mocks the persistance storage using e.g. hash maps, but u get no transactional
or optimistic locking behaviour.

***MOCKING SERVICES, VERIFYING INTERACTIONS, ETC ***
covered before, also on p.242.

*** groovy mocks ***

see example on p.243 , where the send mail method called by the post controller in the example is mocked with a function that
effectively verifies the interaction. Very NIFTY!


***FUNCTIONAL TESTING WITH GEB****
see buildConfig.. added in dependencies and other config for the GEB plugin.
p.246: see this test that very easily navigates to a url and checks the page.
******run functional tests via:

grails test-app functional:

** made test timeLimeFunctionalSpec, but couldn't get it  to work as it want's a firefox to run, FF not installed on this computer!

****SIMULATING USER INTERACTION***
see test:
"Submitting a new post"
does a couple of things, like putting something into a text area and clicking a button, and checking the result comes back to the screen

p.248, interesting, explains that geb sits on selenium, so you need to look for selenium browser drivers rather than geb drivers
headles browsers like phantomjs load of rubbish, although headless firefox was used at Sage.

p.250-1 *** talks about the $(...) selector syntax, standard stuff can select e.g. all things with a given class, etc.
*** p.250 can traverse sub elements of a node etc, see all the methods at the bottom of the page.

251--- some good notes on extracting data from notes, for checking.

***PAGE OBJECT ***
see TimeLinePage.groovy, good way of working with pages, refernces to mark up only in one place, so tests are more maintainable
see: TimelinePageFunctionalSpec for example of using a page object inna test.

*** PAGE NAVIGATION IN GEB TESTS *****
***NOTE: about navigation using the to:
to does a check that you have got there as well, so if you get redirected, the to will fail.
solution: use via and at
e.g.
via TimelinePage
at LoginPage....  gets you to the login page via a redirect from the TimeLinePage .

--- adding in parameters to the URL:
e.g.
to TimelinePage, "phil", max: 10, offset: 0
takes you to:
/users/phil?max=10&offset=0

*** GEB MANUAL section ADVANCED PAGE NAVIGATION good place to look for stuff tdw page navigation.


***** CHAPTER 10-----PLUGINS ****************
--basic ethos of plugins is that grails can call upon java modules, plugin system is just a wrapper around bringing
other stuff in.
263-264, talks about grails plugin repo and also using grais website to get plugins, also

grails list-plugins
 lists stuff in the central repo, also tells you which ones you already have installed.

 Grails plugin repo, is baiscally a maven repo.

 *** use grep to filter; e.g:

 grails list-plugins | grep "mail"

 *** get info about a plugin:
 grails plugin-info mail    - gives you a decent bit of text explaining what the plugin is all about


 ***grails website... has some plugins not available via the repo.

 **grails install-plugin is depracated, use the BuildConfig.groovy file instead, see the plugins section:

 p.266--- looks like plugins have the same potential for dependency pain as maven.

 *** Adding in mail plugin, see buildConfig and also mail related properties in Config.groovy

 see mail section, note that we use google for the smtp server, a common thing apparently for developers to do.

 added in welcomeEmail method of UserController, see how it calls in a jsp template to fromat the email.
****TESTING EMAILS ***
see UserIntegrationSpec for the use of dumbster plugin, see of course also how the plugin is brought in in buildConfig.groovy

couldn't get email to work, sacked it.

**CACHING ***
















